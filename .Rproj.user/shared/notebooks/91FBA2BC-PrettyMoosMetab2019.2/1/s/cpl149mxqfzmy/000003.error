{"frames":[{"func":"metab(bayes_specs, data = data.moos.mm.all)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"metab_fun(specs = specs, data = data, data_daily = data_daily, \n    info = info)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"system.time({\n    dat_list <- mm_validate_data(if (missing(data)) \n        NULL\n    else data, if (missing(data_daily))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"bayes_allply(data_all = filtered$data, data_daily_all = filtered$data_daily, \n    removed = filtered$removed, specs = specs)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(tryCatch({\n    if (is.null(data_all) || nrow(data_all) == 0) \n        stop(\"no valid days of data\")\n    data_list <- prepdata_bayes(data = data_all, data_daily = data_daily_all,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    if (is.null(data_all) || nrow(data_all) == 0) \n        stop(\"no valid days of data\")\n    data_list <- prepdata_bayes(data = data_all, data_daily = data_daily_all,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"do.call(runstan_bayes, c(list(data_list = data_list), specs))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (data_list, model_path, model_name, params_out, split_dates, \n    keep_mcmc = FALSE, n_chains = 4, n_cores = 4, burnin_steps = 1000, \n    saved_steps = 1000, thin_steps = 1, verbose = FALSE, ...) \n{ ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"capture.output(runstan_out <- rstan::sampling(object = stan_mobj, \n    data = data_list, pars = params_out, include = TRUE, chains = n_chains, \n    warmup = burnin_steps, iter = saved_steps + burnin_steps, \n    thin = thin_steps, init = \"random\", verbose = verbose, open_progress = FALSE,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withVisible(...elt(i))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rstan::sampling(object = stan_mobj, data = data_list, pars = params_out, \n    include = TRUE, chains = n_chains, warmup = burnin_steps, \n    iter = saved_steps + burnin_steps, thin = thin_steps, init = \"random\", \n    verbose = verbose, open_progress = FALSE, cores = n_cores)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rstan::sampling(object = stan_mobj, data = data_list, pars = params_out, \n    include = TRUE, chains = n_chains, warmup = burnin_steps, \n    iter = saved_steps + burnin_steps, thin = thin_steps, init = \"random\", \n    verbose = verbose, open_progress = FALSE, cores = n_cores)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".local(object, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"parallel::clusterEvalQ(cl, expr = suppressPackageStartupMessages(require(rstan, \n    quietly = TRUE)))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"clusterCall(cl, eval, substitute(expr), env = .GlobalEnv)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"checkForRemoteErrors(lapply(cl, recvResult))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(cl, recvResult)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData.SOCK0node(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unserialize(node$con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in base::try(fit_model, silent = TRUE) : \n  object 'fit_model' not found\n"}