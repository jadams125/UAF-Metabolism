shov_WR <- shov_WR %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
mast_WR <- mast_WR %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
########################
shov_WR_19.Data <- shov_WR %>% rename(datetimeAK = datetime)
shov_WR_19.Data <- shov_WR_19.Data %>%
select(depth_cm, datetimeAK)
shov_depth_19_WR <- ddply(na.omit(shov_WR_19.Data), .(datetimeAK), summarize, medianDepth = median(as.numeric(depth_cm)))
# shov_wr.lm <- lm(medianDepth~datetimeAK, shov_depth_19)
shov_depth_19_WR <- setDT(shov_depth_19_WR)
shov_depth_19_WR <- shov_depth_19_WR %>%
dplyr::rename(datetimeAK = datetimeAK)
# shov.2019.pt <- shov.2019.pt %>%
#   mutate(across(c(AvgAbsDepth),
#                 ~ifelse(datetimeAK >= "2019-08-26 02:00:00" & datetimeAK <= "2019-09-08 12:15:00", NA, .)))
shov.2019.q.dt <- DoD_Epscor_Q_remove_shov
shov.2019.q.dt <- shov.2019.q.dt %>%
dplyr::rename(datetimeAK = DateTimeAK)
setDT(shov_depth_19_WR)
setDT(shov.2019.q.dt)
shov.2019.q.dt$datetimeAK1 <- shov.2019.q.dt$datetimeAK
setkey( shov.2019.q.dt, datetimeAK )
setkey( shov_depth_19_WR, datetimeAK )
#WR was taken when EXO out of water. round depth point to nearest in data record
rounded.dates_shov19 <- shov.2019.q.dt[ shov_depth_19_WR, roll = "nearest" ]
rounded.dates_shov19_WR_Q <- rounded.dates_shov19 %>% rename(discharge = RatingCurveQ) %>% select(datetimeAK, discharge, medianDepth)
#convert to meters
rounded.dates_shov19_WR_Q$medianDepth <- rounded.dates_shov19_WR_Q$medianDepth /100
shov_pt_wr_graph <- ggplot(rounded.dates_shov19_WR_Q, aes(discharge, medianDepth)) +
geom_point()
# Add regression line
shov_pt_wr_graph + geom_smooth(method = lm) + xlab("Discharge") +ylab ("Depth (WR)")
ggsave("plots/shov_Q_wr_graph.png", width = 15, height = 10, units = "cm", scale = 1.3)
shov19_depth_mod <- lm(medianDepth~discharge, data = rounded.dates_shov19_WR_Q)
summary(shov19_depth_mod)
plot(medianDepth~discharge, data = rounded.dates_shov19_WR_Q)
# abline(shov19_depth_mod)
#extract slope of model and develop rating curve
shov.2019.q.dt$RatingCurveDepth <- shov19_depth_mod$coefficients[1]+(shov19_depth_mod$coefficients[2])*shov.2019.q.dt$Q
#Cureve is bad, use median
DoD_Epscor_Q_remove_shov$depth <- median(shov_WR$depth_cm)
DoD_Epscor_Q_remove_shov2 <- DoD_Epscor_Q_remove_shov[order(DoD_Epscor_Q_remove_shov$DateTimeAK),]
DoD_Epscor_Q_remove_shov2$solar.time <- calc_solar_time(DoD_Epscor_Q_remove_shov2$DateTimeAK,  -148.416554)
DoD_Epscor_Q_remove_shov2 <- DoD_Epscor_Q_remove_shov2 %>% filter(as.character(solar.time)>"2022-06-14 12:07:57" & as.character( solar.time)< "2022-10-05 10:22:57")
ShovData <- DoD_Epscor_Q_remove_shov2 %>% select(DateTimeAK, RatingCurveQ, depth) %>% rename(datetimeAK = DateTimeAK)
shovDO <- merged  %>%filter(site == "SHOV") %>% select(datetimeAK, DO.obs.downstream, temp.water.downstream, DO.sat)
shovDO <- shovDO[order(shovDO$datetimeAK),]
ShovData <- unique(full_join(ShovData, shovDO, by = "datetimeAK"))
# ShovData1 <- aggregate(ShovData$datetimeAK, by=list(DO.obs.downstream=ShovData$DO.obs.downstream,
#                              temp.water.downstream=ShovData$temp.water.downstream,
#                              DO.sat=ShovData$DO.sat,
#                              RatingCurveQ = ShovData$RatingCurveQ,
#                             depth = ShovData$depth),
# data=ShovData,FUN=mean)
# aggregate(realConc ~ ., mean, data = ex)
ShovData$datetimeAK <- as.POSIXct(ShovData$datetimeAK, tz = "America/Anchorage")
ShovData$solar.time <- calc_solar_time(ShovData$datetimeAK,  -148.416554)
#Modeled light
ShovData$light <- calc_light(ShovData$solar.time, 65.024321, -148.416554)
ShovData <- ShovData %>% rename(DO.obs = DO.obs.downstream, temp.water = temp.water.downstream, discharge = RatingCurveQ) %>% select(datetimeAK, solar.time, DO.obs, DO.sat, temp.water, depth, discharge, light)
ShovData <- ShovData %>% filter(as.character(solar.time)>"2022-06-14 12:07:57" & as.character( solar.time)< "2022-10-05 10:22:57")
ts_2022.shov <- data.frame(solar.time = force_tz(as.POSIXct(seq(ymd_hms("2022-06-14 12:07:57"),ymd_hms("2022-10-05 10:22:57"), by = '15 mins')), tz = "UTC"))
ShovData <- full_join(ShovData, ts_2022.shov, by = "solar.time")
ShovData <- ShovData %>% select(datetimeAK, DO.obs, DO.sat, temp.water, depth, discharge, light)
ShovData$solar.time <- calc_solar_time(ShovData$datetimeAK,  -148.416554)
ShovData <- ShovData %>% filter(as.character(solar.time)>"2022-06-14 12:07:57" & as.character( solar.time)< "2022-10-05 10:22:57")
ShovData %>% ggplot(aes(x=solar.time, y=DO.obs))+geom_miss_point()
ShovData %>% ggplot(aes(x=solar.time, y=temp.water))+geom_miss_point()
ShovData %>% ggplot(aes(x=solar.time, y=DO.sat))+geom_miss_point()
ShovData %>% ggplot(aes(x=solar.time, y=depth))+geom_miss_point()
ShovData %>% ggplot(aes(x=solar.time, y=discharge))+geom_miss_point()
ShovData.mm<- ShovData
ShovData.mm %>% ggplot(aes(x=solar.time, y=discharge))+geom_miss_point()
ShovData.mm$DO.obs <- na_kalman(ShovData.mm$DO.obs)
ShovData.mm$temp.water <- na_kalman(ShovData.mm$temp.water)
ShovData.mm$DO.sat <- na_kalman(ShovData.mm$DO.sat, type = "level")
ShovData.mm$discharge <- na_kalman(ShovData.mm$discharge)
# ShovData.mm$depth <- na_kalman(ShovData.mm$depth)
write.csv(data.shov.mm.all, here("outputs","clean.shov.2022.csv"))
data.shov.mm.all <- ShovData.mm
write.csv(data.shov.mm.all, here("outputs","clean.shov.2022.csv"))
DoD_Epscor_Q_remove_mast <- DoD_Epscor_Q %>%
mutate(across(c(MAST),
~ifelse(as.character(X) == "6205", NA, .)))
p1 <- DoD_Epscor_Q_remove_mast %>% ggplot(aes(x=MAST,y= POKE)) + geom_point()+ stat_poly_line() + stat_poly_eq()+ggtitle("mast, One WR removed")
p2 <- DoD_Epscor_Q_remove_mast %>% ggplot(aes(x=MAST,y= STRT)) + geom_point()+ stat_poly_line() + stat_poly_eq()
p3 <- DoD_Epscor_Q_remove_mast %>% ggplot(aes(x=MAST,y= MOOS.Q.int)) + geom_point()+ stat_poly_line() + stat_poly_eq()
p4 <- DoD_Epscor_Q_remove_mast %>% ggplot(aes(x=MAST,y= FRCH )) + geom_point()+ stat_poly_line() + stat_poly_eq()
p5 <- DoD_Epscor_Q_remove_mast %>% ggplot(aes(x=MAST,y= goldstream)) + geom_point()+ stat_poly_line() + stat_poly_eq()+scale_y_continuous(limit = c(-10, 50))
p6 <- DoD_Epscor_Q_remove_mast %>% ggplot(aes(x=MAST,y= chena)) + geom_point()+ stat_poly_line() + stat_poly_eq()
dev.next()
ggarrange(p1,p2,p3,p4,p5,p6, ncol = 3, nrow = 2)
#TKH said in meeting use poker for mast
mast_Q_mod <- lm( MAST~POKE.Q.int, data = DoD_Epscor_Q_remove_mast)
#extract slope of model and develop rating curve
DoD_Epscor_Q_remove_mast$RatingCurveQ <- mast_Q_mod$coefficients[1]+(mast_Q_mod$coefficients[2]*DoD_Epscor_Q_remove_mast$POKE.Q.int)
################## Depth ##################
### This is my attempt at doing our discharge from mast ###
setwd(here())
## Read in data from Google Drive
SHOVurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSVSc2AC_Qpe6indix73QBOWWcEowSuke2Dscl3uI8PZXgCoaHZA6niK7dLXWqPkW03c4KOYosGKvSV/pub?output=csv"
MASTurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTR0uJBkWWaGbxoGT7hvaJ5H4AOAmQXyLt_stT7q_PQLbKaowYN3usdzk_3nR6vxRequLitLJpnxKMh/pub?output=csv"
#read in shov discharge sheet
shov_WR <- read.csv(url(SHOVurl), stringsAsFactors = FALSE)
mast_WR <- read.csv(url(MASTurl), stringsAsFactors = FALSE)
# Rename columns
names(shov_WR) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(mast_WR) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
# Input NA for missing time
shov_WR$Time[shov_WR$Time == ""] <- NA
mast_WR$Time[mast_WR$Time == ""] <- NA
# Using fill function from tidyverse
shov_WR <- shov_WR %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
mast_WR <- mast_WR %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
## Create datetime column
# Convert integer date to Date
shov_WR$Date <- as.Date(as.character(shov_WR$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
mast_WR$Date <- as.Date(as.character(mast_WR$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
# Concatenate date & time
shov_WR$datetime <- as.POSIXct(paste(shov_WR$Date, shov_WR$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
mast_WR$datetime <- as.POSIXct(paste(mast_WR$Date, mast_WR$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
## Calculate mean velocity = meanVel_m_s
shov_WR <- shov_WR %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
mast_WR <- mast_WR %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
########################
mast_WR_19.Data <- mast_WR %>% rename(datetimeAK = datetime)
mast_WR_19.Data <- mast_WR_19.Data %>%
select(depth_cm, datetimeAK)
mast_depth_19_WR <- ddply(na.omit(mast_WR_19.Data), .(datetimeAK), summarize, medianDepth = median(as.numeric(depth_cm)))
# mast_wr.lm <- lm(medianDepth~datetimeAK, mast_depth_19)
mast_depth_19_WR <- setDT(mast_depth_19_WR)
mast_depth_19_WR <- mast_depth_19_WR %>%
dplyr::rename(datetimeAK = datetimeAK)
# mast.2019.pt <- mast.2019.pt %>%
#   mutate(across(c(AvgAbsDepth),
#                 ~ifelse(datetimeAK >= "2019-08-26 02:00:00" & datetimeAK <= "2019-09-08 12:15:00", NA, .)))
mast.2019.q.dt <- DoD_Epscor_Q_remove_mast
mast.2019.q.dt <- mast.2019.q.dt %>%
dplyr::rename(datetimeAK = DateTimeAK)
setDT(mast_depth_19_WR)
setDT(mast.2019.q.dt)
mast.2019.q.dt$datetimeAK1 <- mast.2019.q.dt$datetimeAK
setkey( mast.2019.q.dt, datetimeAK )
setkey( mast_depth_19_WR, datetimeAK )
#WR was taken when EXO out of water. round depth point to nearest in data record
rounded.dates_mast19 <- mast.2019.q.dt[ mast_depth_19_WR, roll = "nearest" ]
rounded.dates_mast19_WR_Q <- rounded.dates_mast19 %>% rename(discharge = RatingCurveQ) %>% select(datetimeAK, discharge, medianDepth)
#convert to meters
rounded.dates_mast19_WR_Q$medianDepth <- rounded.dates_mast19_WR_Q$medianDepth /100
mast_pt_wr_graph <- ggplot(rounded.dates_mast19_WR_Q, aes(discharge, medianDepth)) +
geom_point()
# Add regression line
mast_pt_wr_graph + geom_smooth(method = lm) + xlab("Discharge") +ylab ("Depth (WR)")
ggsave("plots/mast_Q_wr_graph.png", width = 15, height = 10, units = "cm", scale = 1.3)
mast19_depth_mod <- lm(medianDepth~discharge, data = rounded.dates_mast19_WR_Q)
summary(mast19_depth_mod)
plot(medianDepth~discharge, data = rounded.dates_mast19_WR_Q)
# abline(mast19_depth_mod)
#extract slope of model and develop rating curve
mast.2019.q.dt$RatingCurveDepth <- mast19_depth_mod$coefficients[1]+(mast19_depth_mod$coefficients[2])*mast.2019.q.dt$Q
#Cureve is bad, use median
DoD_Epscor_Q_remove_mast$depth <- median(mast_WR$depth_cm)
mastData <- DoD_Epscor_Q_remove_mast %>% select(DateTimeAK, RatingCurveQ, depth) %>% rename(datetimeAK = DateTimeAK)
mastDO <- merged  %>%filter(site == "MAST") %>% select(datetimeAK, DO.obs.downstream, temp.water.downstream, DO.sat)
mastData <- full_join(mastData, mastDO, by = "datetimeAK")
mastData$solar.time <- calc_solar_time(mastData$datetimeAK,  -146.397201)
#Modeled light
mastData$light <- calc_light(mastData$solar.time, 64.893390, -146.397201)
mastData <- mastData %>% rename(DO.obs = DO.obs.downstream, temp.water = temp.water.downstream, discharge = RatingCurveQ) %>% select(datetimeAK, solar.time, DO.obs, DO.sat, temp.water, depth, discharge, light)
mastData <- mastData %>% filter(as.character(solar.time)>"2022-05-27 15:01:01" & as.character( solar.time)< "2022-10-06 10:16:01")
ts_2022.mast <- data.frame(solar.time = force_tz(as.POSIXct(seq(ymd_hms("2022-05-27 15:01:01"),ymd_hms("2022-10-06 10:16:01"), by = '15 mins')), tz = "UTC"))
mastData <- full_join(mastData, ts_2022.mast, by = "solar.time")
mastData <- mastData %>% select(datetimeAK, DO.obs, DO.sat, temp.water, depth, discharge, light)
mastData$solar.time <- calc_solar_time(mastData$datetimeAK,  -146.39720)
mastData <- mastData %>% filter(as.character(solar.time)>"2022-05-27 15:01:01" & as.character( solar.time)< "2022-10-06 10:16:01")
mastData %>% ggplot(aes(x=solar.time, y=DO.obs))+geom_miss_point()
mastData %>% ggplot(aes(x=solar.time, y=temp.water))+geom_miss_point()
mastData %>% ggplot(aes(x=solar.time, y=DO.sat))+geom_miss_point()
mastData %>% ggplot(aes(x=solar.time, y=depth))+geom_miss_point()
mastData %>% ggplot(aes(x=solar.time, y=discharge))+geom_miss_point()
mastData.mm <- mastData
mastData.mm %>% ggplot(aes(x=solar.time, y=discharge))+geom_miss_point()
mastData.mm$DO.obs <- na_kalman(mastData.mm$DO.obs)
mastData.mm$temp.water <- na_kalman(mastData.mm$temp.water, type = "level")
mastData.mm$DO.sat <- na_kalman(mastData.mm$DO.sat, type = "level")
mastData.mm$discharge <- na_kalman(mastData.mm$discharge)
# mastData.mm$depth <- na_kalman(mastData.mm$depth)
write.csv(data.mast.mm.all, here("outputs","clean.mast.2022.csv"))
data.mast.mm.all <- mastData.mm
write.csv(data.mast.mm.all, here("outputs","clean.mast.2022.csv"))
write.csv(here(data.craw.mm.all, "outputs","clean.craw.2022.csv"))
data.craw.mm.all <- CrawData.mm
write.csv(here(data.craw.mm.all, "outputs","clean.craw.2022.csv"))
View(CrawData.mm)
data.craw.mm.all <- CrawData.mm
write.csv(data.craw.mm.all, here("outputs","clean.craw.2022.csv"))
View(CrawData.mm)
View(CrawData)
DoD_Epscor_Q_remove_craw$depth <- median(craw_WR$depth_cm)
CrawData <- DoD_Epscor_Q_remove_craw %>% select(DateTimeAK, RatingCurveQ, depth) %>% rename(datetimeAK = DateTimeAK)
crawDO <- merged  %>%filter(site == "CRAW") %>% select(datetimeAK, DO.obs.downstream, temp.water.downstream, DO.sat)
CrawData <- full_join(CrawData, crawDO, by = "datetimeAK")
CrawData$solar.time <- calc_solar_time(CrawData$datetimeAK, -146.417931)
#Modeled light
CrawData$light <- calc_light(CrawData$solar.time, 64.894040, -146.417931)
CrawData <- CrawData %>% rename(DO.obs = DO.obs.downstream, temp.water = temp.water.downstream, discharge = RatingCurveQ) %>% select(datetimeAK, solar.time, DO.obs, DO.sat, temp.water, depth, discharge)
CrawData$light <- calc_light(CrawData$solar.time, 64.894040, -146.417931)
CrawData <- CrawData %>% filter(solar.time>"2022-05-27 16:45:56" & solar.time< "2022-10-06 11:30:56")
CrawData %>% ggplot(aes(x=solar.time, y=DO.obs))+geom_miss_point()
CrawData %>% ggplot(aes(x=solar.time, y=temp.water))+geom_miss_point()
CrawData %>% ggplot(aes(x=solar.time, y=DO.sat))+geom_miss_point()
CrawData %>% ggplot(aes(x=solar.time, y=depth))+geom_miss_point()
CrawData %>% ggplot(aes(x=solar.time, y=discharge))+geom_miss_point()
CrawData.mm <- CrawData %>% select(datetimeAK, solar.time, temp.water, DO.obs, discharge, depth, light, DO.sat) %>%
group_by(solar.time, new2 = rleid(is.na(discharge))) %>%
ungroup() %>%
group_by(discharge,new2) %>%
filter(n()<48) %>%
select(-new2)
CrawData.mm %>% ggplot(aes(x=solar.time, y=discharge))+geom_miss_point()
CrawData.mm$DO.obs <- na_kalman(CrawData.mm$DO.obs)
CrawData.mm$temp.water <- na_kalman(CrawData.mm$temp.water)
CrawData.mm$DO.sat <- na_kalman(CrawData.mm$DO.sat, type = "level")
CrawData.mm$discharge <- na_kalman(CrawData.mm$discharge)
# CrawData.mm$depth <- na_kalman(CrawData.mm$depth)
data.craw.mm.all <- CrawData.mm
write.csv(data.craw.mm.all, here("outputs","clean.craw.2022.csv"))
strt.gpp <- rbind( read.csv(here("outputs", "stuart2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "stuart2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "stuart2021-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "stuart2022-Run_2023-Full.rerun.02.04.csv")))
strt.gpp$site = "STRT"
strt.gpp$PF = "High"
strt.gpp$burn = "Burned"
strt.gpp$year <- format(as.Date(strt.gpp$date, format="%Y-%m-%d"),"%Y")
vaul.gpp <- rbind( read.csv(here("outputs", "vault2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "vault2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "vault2021-2022-Run_2023-Full.rerun.02.04.csv")))
vaul.gpp$site = "VAUL"
vaul.gpp$PF = "High"
vaul.gpp$burn = "Unburned"
vaul.gpp$year <- format(as.Date(vaul.gpp$date, format="%Y-%m-%d"),"%Y")
#Poker 2022 bad
poke.gpp <- rbind( read.csv(here("outputs", "poker2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "poker2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "poker2021-Run_2023-Full.rerun.02.04.csv")))
poke.gpp$site = "POKE"
poke.gpp$PF = "Low"
poke.gpp$burn = "Burned"
poke.gpp$year <- format(as.Date(poke.gpp$date, format="%Y-%m-%d"),"%Y")
frch.gpp <- rbind( read.csv(here("outputs", "french2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "french2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "french2021-Run_2023-Full.rerun.02.04.csv")),read.csv(here("outputs", "french2022-Run_2023-Full.rerun.02.04.csv")))
frch.gpp$site = "FRCH"
frch.gpp$PF = "Low"
frch.gpp$burn = "Unburned"
frch.gpp$year <- format(as.Date(frch.gpp$date, format="%Y-%m-%d"),"%Y")
moos.gpp <- rbind(
read.csv(here("outputs", "moose2019-Run_2023-Full.rerun.02.04.csv")),
read.csv(here("outputs", "moose2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs","moose2021-Run_2023-Full.rerun.02.04.csv")),
read.csv(here("outputs", "moose2022-Run_2023-Full.rerun.02.04.csv"))
)
moos.gpp$site = "MOOS"
moos.gpp$PF = "Low"
moos.gpp$burn = "Burned"
moos.gpp$year <- format(as.Date(moos.gpp$date, format="%Y-%m-%d"),"%Y")
#combine
metab_all <- rbind(strt.gpp, vaul.gpp, poke.gpp, frch.gpp, moos.gpp)
metab_all.short <- metab_all %>% select(date, GPP_mean, GPP_daily_se_mean, GPP_daily_sd, GPP_Rhat, site)
write.csv(metab_all.short, here("outputs", "DoD_metab_TS.csv"))
metab_all$year <- as.character (metab_all$year)
metab_all$burn <- as.character(metab_all$burn)
metab_all$PF <- as.character(metab_all$PF)
test.mod <- lmer(data = metab_all, log(GPP_mean) ~ burn + PF + (1|year))
library(lme4)
test.mod <- lmer(data = metab_all, log(GPP_mean) ~ burn + PF + (1|year))
metab_all.2019 <- metab_all %>% filter(year == "2019")
interaction.plot(metab_all.2019$burn, metab_all.2019$PF, metab_all.2019$GPP_mean)
View(metab_all.2019)
plotingNA <- na.omit(metab_all.2019)
View(plotingNA)
boxplot(metab_all.2019$GPP_mean ~ metab_all.2019$burn + metab_all.2019$PF)
boxplot(metab_all.2019$GPP_mean ~ metab_all.2019$burn + metab_all.2019$PF)
interaction.plot(metab_all.2019$burn, metab_all.2019$PF, metab_all.2019$GPP_mean)
View(metab_all.2019)
metab_all$burn <- as.factor(metab_all$burn)
metab_all$PF <- as.factor(metab_all$PF)
metab_all.2019 <- metab_all %>% filter(year == "2019")
interaction.plot(metab_all.2019$burn, metab_all.2019$PF, metab_all.2019$GPP_mean)
library(tidyverse)
library(dplyr)
metab_all$year <- as.character (metab_all$year)
metab_all$burn <- as.character(metab_all$burn)
metab_all$PF <- as.character(metab_all$PF)
test.mod <- lmer(data = metab_all, log(GPP_mean) ~ burn + PF + (1|year))
plot(test.mod)
test.mod <- lmer(data = metab_all, (GPP_mean) ~ burn + PF + (1|year))
plot(test.mod)
test.mod <- lmer(data = metab_all, ln(GPP_mean) ~ burn + PF + (1|year))
test.mod <- lmer(data = metab_all, (GPP_mean)^2 ~ burn + PF + (1|year))
plot(test.mod)
test.mod <- lmer(data = metab_all, (GPP_mean)^0.5 ~ burn + PF + (1|year))
plot(test.mod)
test.mod <- lmer(data = metab_all, log(GPP_mean) ~ burn + PF + (1|year))
plot(test.mod)
View(metab_all)
median(na.omit(metab_all$GPP_mean))
mean(na.omit(metab_all$GPP_mean))
strt.gpp <- rbind( read.csv(here("outputs", "stuart2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "stuart2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "stuart2021-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "stuart2022-Run_2023-Full.rerun.02.04.csv")))
strt.gpp$site = "STRT"
strt.gpp$PF = "High"
strt.gpp$burn = "Burned"
strt.gpp$year <- format(as.Date(strt.gpp$date, format="%Y-%m-%d"),"%Y")
vaul.gpp <- rbind( read.csv(here("outputs", "vault2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "vault2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "vault2021-2022-Run_2023-Full.rerun.02.04.csv")))
vaul.gpp$site = "VAUL"
vaul.gpp$PF = "High"
vaul.gpp$burn = "Unburned"
vaul.gpp$year <- format(as.Date(vaul.gpp$date, format="%Y-%m-%d"),"%Y")
#Poker 2022 bad
poke.gpp <- rbind( read.csv(here("outputs", "poker2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "poker2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "poker2021-Run_2023-Full.rerun.02.04.csv")))
poke.gpp$site = "POKE"
poke.gpp$PF = "Low"
poke.gpp$burn = "Burned"
poke.gpp$year <- format(as.Date(poke.gpp$date, format="%Y-%m-%d"),"%Y")
frch.gpp <- rbind( read.csv(here("outputs", "french2019-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "french2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs", "french2021-Run_2023-Full.rerun.02.04.csv")),read.csv(here("outputs", "french2022-Run_2023-Full.rerun.02.04.csv")))
frch.gpp$site = "FRCH"
frch.gpp$PF = "Low"
frch.gpp$burn = "Unburned"
frch.gpp$year <- format(as.Date(frch.gpp$date, format="%Y-%m-%d"),"%Y")
moos.gpp <- rbind(
read.csv(here("outputs", "moose2019-Run_2023-Full.rerun.02.04.csv")),
read.csv(here("outputs", "moose2020-Run_2023-Full.rerun.02.04.csv")), read.csv(here("outputs","moose2021-Run_2023-Full.rerun.02.04.csv")),
read.csv(here("outputs", "moose2022-Run_2023-Full.rerun.02.04.csv"))
)
moos.gpp$site = "MOOS"
moos.gpp$PF = "Low"
moos.gpp$burn = "Burned"
moos.gpp$year <- format(as.Date(moos.gpp$date, format="%Y-%m-%d"),"%Y")
#combine
metab_all <- rbind(strt.gpp, vaul.gpp, poke.gpp, frch.gpp, moos.gpp)
median(na.omit(metab_all$GPP_mean))
mean(na.omit(metab_all$GPP_mean))
mean(na.omit(metab_all$GPP_daily_mean))
max(na.omit(metab_all$GPP_daily_mean))
min(na.omit(metab_all$GPP_daily_mean))
ggplot(metab_all,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3)
metab_all$DOY <- yday(metab_all$Date)
metab_all$DOY <- yday(as.Date( metab_all$Date))
metab_all$DOY <- yday(as.Date(metab_all$Date))
metab_all$DOY <- yday(as.POSIXct(metab_all$Date))
yday(2022-01-07)
metab_all$DOY <- yday(as.POSIXct(metab_all$Date))
View(metab_all)
metab_all$DOY <- yday(as.POSIXct(metab_all$date))
View(metab_all)
View(metab_all)
df.meanYear <- metab_all %>%
group_by(Year) %>%
group_by(Site) %>%
summarize_each(funs(max(DOY)))
View(metab_all)
df.meanYear <- metab_all %>%
group_by(year) %>%
group_by(Site) %>%
summarize_each(funs(max(DOY)))
df.meanYear <- metab_all %>%
group_by(year) %>%
group_by(site) %>%
summarize_each(funs(max(DOY)))
View(df.meanYear)
df.meanYear <- metab_all %>%
group_by(year) %>%
group_by(site) %>%
summarize_each(funs(min(DOY)))
View(df.meanYear)
df.meanYear <- metab_all %>%
group_by(year) %>%
summarize_each(funs(min(DOY)))
View(df.meanYear)
df.minYear <- metab_all %>%
group_by(year) %>%
summarize_each(funs(min(DOY)))
df.maxYear <- metab_all %>%
group_by(year) %>%
summarize_each(funs(max(DOY)))
View(df.maxYear)
df.maxYear <- metab_all %>%
group_by(year, site) %>%
summarize_each(funs(max(DOY)))
View(df.maxYear)
df.minYear <- metab_all %>%
group_by(year,site) %>%
summarize_each(funs(min(DOY)))
View(df.minYear)
max(df.minYear$DOY)
df.maxYear <- metab_all %>%
group_by(year, site) %>%
summarize_each(funs(max(DOY)))
min(df.maxYear$DOY)
View(df.maxYear)
df.minYear <- metab_all %>%
group_by(year,site) %>%
summarize_each((min(DOY)))
df.minYear <- metab_all %>%
group_by(year,site) %>%
summarize_each((min(metab_all$DOY)))
metab_all.min <- group_by(metab_all, year, site)
metab_all.min <- group_by(metab_all, year, site)
df.min <- summarise(metab_all.min, min.DOY = min(DOY))
View(metab_all.min)
View(df.min)
library(dplyr)
metab_all.min <- group_by(metab_all, year, site)
df.min <- summarise(metab_all.min, min.DOY = min(DOY))
View(df.min)
metab_all.max <- group_by(metab_all, year, site)
df.max <- summarise(metab_all.max, max.DOY = max(DOY))
View(df.max)
#highest minimum for all years
metab_all <- filter(DOT>= "169")
#highest minimum for all years
metab_all <- filter(DOY>= "169")
#highest minimum for all years
metab_all_stw <-metab_all %>%   filter(DOY>= "169")
metab_all_stw <- metab_all_stw %>% filter(DOY<= "255")
mean_cl_quantile <- function(x, q = c(0.25, 0.75), na.rm = TRUE){
dat <- data.frame(y = mean(x, na.rm = na.rm),
ymin = quantile(x, probs = q[1], na.rm = na.rm),
ymax = quantile(x, probs = q[2], na.rm = na.rm))
return(dat)
}
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3)
mean_cl_quantile <- function(x, q = c(0.25, 0.75), na.rm = TRUE){
dat <- data.frame(y = mean(x, na.rm = na.rm),
ymin = quantile(x, probs = q[1], na.rm = na.rm),
ymax = quantile(x, probs = q[2], na.rm = na.rm))
return(dat)
}
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3)
View(metab_all_stw)
median(metab_all_stw$GPP_mean)
median(na.omit(metab_all_stw$GPP_mean))
mean(na.omit(metab_all_stw$GPP_mean))
summary(metab_all_stw$GPP_mean)
mean_cl_quantile <- function(x, q = c(0.25, 0.75), na.rm = TRUE){
dat <- data.frame(y = median(x, na.rm = na.rm),
ymin = quantile(x, probs = q[1], na.rm = na.rm),
ymax = quantile(x, probs = q[2], na.rm = na.rm))
return(dat)
}
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3)
mean_cl_quantile
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3)+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(y = expression(paste("Day of the Year")))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3)+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3, color = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = mean_cl_quantile, alpha = 0.3, color = "green", fill = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
median_cl_quantile <- function(x, q = c(0.25, 0.75), na.rm = TRUE){
dat <- data.frame(y = median(x, na.rm = na.rm),
ymin = quantile(x, probs = q[1], na.rm = na.rm),
ymax = quantile(x, probs = q[2], na.rm = na.rm))
return(dat)
}
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = median_cl_quantile, alpha = 0.3, color = "green", fill = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
geom_smooth(stat = 'summary', alpha = 0.2, fill = 'green', color = 'green',
fun.data = median_hilow, fun.args = list(conf.int = 0.5))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = median_cl_quantile, alpha = 0.3, color = "green", fill = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = median_cl_quantile, alpha = 0.3, color = "green", fill = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))
median(na.omit(metab_all_stw$GPP_mean))
mean(na.omit(metab_all_stw$GPP_mean))
View(metab_all_stw)
#highest minimum for all years
metab_all.2019 <-metab_all %>% filter(year =="2019") %>%    filter(DOY>= "167" & DOY<"274")
View(metab_all.2019)
metab_all.2020 <-metab_all %>% filter(year =="2020") %>% filter(DOY>= "169" & DOY<="276")
metab_all.2020 <-metab_all %>% filter(year =="2020") %>% filter(DOY>= "169" & DOY<="276")
metab_all.2021 <-metab_all %>% filter(year =="2021") %>% filter(DOY>= "163" & DOY<="270")
metab_all.2022 <-metab_all %>% filter(year =="2022") %>% filter(DOY>= "164" & DOY<="271")
metab_all_stw <- rbind(metab_all.2019, metab_all.2020, metab_all.2021, metab_all.2022)
median_cl_quantile <- function(x, q = c(0.25, 0.75), na.rm = TRUE){
dat <- data.frame(y = median(x, na.rm = na.rm),
ymin = quantile(x, probs = q[1], na.rm = na.rm),
ymax = quantile(x, probs = q[2], na.rm = na.rm))
return(dat)
}
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = median_cl_quantile, alpha = 0.3, color = "green", fill = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))
+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = median_cl_quantile, alpha = 0.3, color = "green", fill = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))
ggplot(metab_all_stw,aes(DOY, GPP_mean)) +
stat_summary(geom = "line", fun.y = median) +
stat_summary(geom = "ribbon", fun.data = median_cl_quantile, alpha = 0.3, color = "green", fill = "green")+labs(y = expression(paste("Median GPP (g ", O[2] ," ", m^2, d^-1, ")")))+ labs(x = expression(paste("Day of the Year")))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+ theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+theme(axis.text.y=element_text(size=20))+theme( axis.title.y = element_text(size = 20))+theme(axis.text.x=element_text(size=20))+theme( axis.title.x = element_text(size = 20)) +theme(plot.title = element_text(hjust = 0.5))+theme(plot.title = element_text(size = 40, face = "bold"))
summary(metab_all_stw$GPP_mean)
summary(na.omit(metab_all_stw$GPP_mean))
mean(na.omit(metab_all_stw$GPP_mean))
