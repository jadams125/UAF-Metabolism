clean$solar.time <- calc_solar_time(as.POSIXct(clean$datetimeAK), longitude = -146.916364)
ggplot() +
geom_point(data=clean, aes(x=datetimeAK,y=DO.obs))+
geom_point(data=clean, aes(x=datetimeAK,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500)) +  theme(text = element_text(size=100))
View(clean)
ggplot() +
geom_point(data=clean, aes(x=datetimeAK,y=DO.obs))+
geom_point(data=clean, aes(x=datetimeAK,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500)) +  theme(text = element_text(size=100)))+scale_x_datetime(breaks = "3 days")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot() +
geom_point(data=clean, aes(x=datetimeAK,y=DO.obs))+
geom_point(data=clean, aes(x=datetimeAK,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500)) +  theme(text = element_text(size=100))+scale_x_datetime(breaks = "3 days")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
clean2020.1 <- clean %>% filter(solar.time < "2020-06-21 04:13:57")
clean2020.1 <- clean %>% filter(solar.time < "2020-06-21 04:13:57")
clean2020.2 <- clean %>% filter(solar.time>= "2020-06-28 04:13:57")
clean2020.1 <- clean %>% filter(as.character(solar.time) < "2020-06-21 04:13:57")
clean2020.2 <- clean %>% filter(as.character(solar.time)>= "2020-06-28 04:13:57")
clean <- rbind(clean2020.1, clean2020.2)
#remove after shutdown
clean.moos.2020 <- clean %>% filter(as.character(solar.time) < "2020-09-03 04:13:57")
write.csv(clean.moos.2020, here("outputs", "clean.moos.2020.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(anytime)
library(googlesheets4)
library(ggpmisc)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(zoo)
library(xts)
library(forecast)
library(googledrive)
library(streamMetabolizer)
library(readr)
library(here)
library(rstan)
library(imputeTS)
library(itsmr)
library(purrr)
library(naniar)
library(data.table)
library(grid)
MOOS.comb.in <- read.csv(here("outputs", "moos.comb.csv"))
MOOS.comb.in <- MOOS.comb.in %>% filter(datetimeAK >= "2019-05-31 15:45:00" & datetimeAK < "2019-10-22 07:30:00")
anyNA(MOOS.comb.in, recursive = TRUE)
lapply(MOOS.comb.in, summary)
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = temp.water)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.sat.EXO)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = depth)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = light)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = discharge)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
clean <- MOOS.comb.in %>%
mutate(datetimeAK = lubridate::ymd_hms(datetimeAK)) %>%
group_by(datetimeAK, new = rleid(is.na(DO.obs))) %>%
ungroup() %>%
group_by(DO.obs,new) %>%
filter(n()<48) %>%
select(-new)
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
#NOTE: In these plots, Missing means NA. Data is still missing, but NAs have been removed. This removes those rows from the whole TS. Since the gap is greater than 12 hours, we cannot gap fill any of these slots anyway
# Take out that weird Q data in july
clean1 <- clean %>% filter(as.character(datetimeAK)< "2019-07-08 13:00:00")
clean2 <- clean %>% filter(as.character(datetimeAK) >"2019-07-09 09:15:00")
cleanAdjust <- clean %>% filter(as.character(datetimeAK)>= "2019-07-08 13:00:00"& as.character(datetimeAK) <="2019-07-09 09:15:00")
cleanAdjust$discharge = cleanAdjust$discharge - (648.3557 - 433.9846)
cleanAdjust$depth = cleanAdjust$depth - (0.4084102-0.3518778)
cleanTest <- rbind(clean1, cleanAdjust, clean2)
cleanTest <- cleanTest %>%
mutate(across(c(discharge,depth),
~ifelse(as.character(datetimeAK) >= "2019-07-09 08:00:00" & as.character(datetimeAK) <= "2019-07-09 09:15:00", NA, .)))
cleanTest <- cleanTest %>%
mutate(across(c(discharge, depth),
~ifelse(as.character(datetimeAK) == "2019-07-08 13:00:00", NA, .)))
cleanTest %>% filter(as.character(datetimeAK) > "2019-07-04 00:00:00" & as.character(datetimeAK) < "2019-07-14 00:00:00") %>%ggplot(aes(x = as.POSIXct(datetimeAK), y = discharge)) + geom_miss_point()
clean <- cleanTest
clean$temp.water <- na_kalman(clean$temp.water)
clean$ODO.Psat <- na_kalman(clean$ODO.Psat)
clean$DO.obs <- na_kalman(clean$DO.obs, type = "level")
clean$DO.sat.EXO <- na_kalman(clean$DO.sat.EXO, type = "level")
clean$depth <- na_kalman(clean$depth, type = "level")
clean$discharge <- na_kalman(clean$discharge, type = "level")
clean$light <- na_kalman(clean$light, type = "level")
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = temp.water)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.sat.EXO)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = depth)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = light)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = discharge)) + geom_miss_point()
clean$datetimeAK <- force_tz(as.POSIXct(clean$datetimeAK), "America/Anchorage")
clean$solar.time <- calc_solar_time(as.POSIXct(clean$datetimeAK), longitude = -146.916364)
ggplot() +
geom_point(data=clean, aes(x=datetimeAK,y=DO.obs))+
geom_point(data=clean, aes(x=datetimeAK,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500))
#Filtering only works properly as character
clean %>% filter(as.character(solar.time) <= "2019-08-01 04:13:57") %>% ggplot() +
geom_point(aes(x=solar.time,y=DO.obs))+
geom_point(aes(x=solar.time,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500))
########## EXTRA #########
# Try modeled light
PAR.obs <- clean %>% ungroup() %>%  select(solar.time, light)
clean$light <- calc_light(clean$solar.time, 64.7141530797916, -147.053919481172)
clean.moos.2019 <- clean %>% filter(as.character(solar.time) < "2019-08-01 04:13:57")
write.csv(clean.moos.2019, here("outputs", "clean.moos.2019.csv"))
MOOS.comb.in <- read.csv(here("outputs", "moos.comb.csv"))
MOOS.comb.in <- MOOS.comb.in %>% filter(datetimeAK >= "2020-03-31 15:45:00" & datetimeAK < "2020-11-22 07:30:00")
anyNA(MOOS.comb.in, recursive = TRUE)
lapply(MOOS.comb.in, summary)
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = temp.water)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.sat.EXO)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = depth)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = light)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = discharge)) + geom_miss_point()
# Fill DO with Telem
#convert from PSAT to mg/L using the formula the EXO uses
MOOS.comb.in.1 <- MOOS.comb.in %>% filter(datetimeAK < "2020-08-25 22:45:00")
MOOS.comb.in.2 <- MOOS.comb.in %>% filter(datetimeAK > "2020-09-02 16:45:00")
MOOS.comb.in.2020TelemFill <- MOOS.comb.in %>% filter(datetimeAK >= "2020-08-25 22:45:00" & datetimeAK <= "2020-09-02 16:45:00")
MOOS.comb.in.2020TelemFill$DO.obs <- as.numeric(MOOS.comb.in.2020TelemFill$ODO.Psat) * (0.01* exp(
(-862194900000*(1/(MOOS.comb.in.2020TelemFill$temp.water+273.15))^4+12438000000*(1/(MOOS.comb.in.2020TelemFill$temp.water+273.15))^3-66423080*(1/(MOOS.comb.in.2020TelemFill$temp.water+273.15))^2+157570.1*(1/(MOOS.comb.in.2020TelemFill$temp.water+273.15))-139.344)
-0* (2140.7*(1/(MOOS.comb.in.2020TelemFill$temp.water+273.15))^2-10.754*(1/(MOOS.comb.in.2020TelemFill$temp.water+273.15))+0.017674 )))
MOOS.comb.in.2020TelemFill$DO.sat.EXO = MOOS.comb.in.2020TelemFill$DO.obs/ (MOOS.comb.in.2020TelemFill$ODO.Psat/100)
MOOS.comb.in <- rbind(MOOS.comb.in.1,MOOS.comb.in.2020TelemFill,MOOS.comb.in.2  )
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.sat.EXO)) + geom_miss_point()
#remove Depth Outliars
#convert from PSAT to mg/L using the formula the EXO uses
MOOS.comb.in <- MOOS.comb.in %>%
mutate(across(c(depth, discharge),
~ifelse(datetimeAK >= "2020-08-17 05:15:00" & datetimeAK <="2020-08-17 06:45:00", NA, .)))
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = depth)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
clean <- MOOS.comb.in %>%
mutate(datetimeAK = lubridate::ymd_hms(datetimeAK)) %>%
group_by(datetimeAK, new = rleid(is.na(DO.obs))) %>%
ungroup() %>%
group_by(DO.obs,new) %>%
filter(n()<48) %>%
select(-new)
clean$temp.water <- na_kalman(clean$temp.water, type = "level")
clean$ODO.Psat <- na_kalman(clean$ODO.Psat)
clean$DO.obs <- na_kalman(clean$DO.obs)
clean$DO.obs <- na_kalman(clean$DO.obs, type = "level")
clean$DO.sat.EXO <- na_kalman(clean$DO.sat.EXO, type = "level")
clean$DO.sat.EXO <- na_kalman(clean$DO.sat.EXO)
clean$depth <- na_kalman(clean$depth, type = "level")
clean$discharge <- na_kalman(clean$discharge, type = "level")
clean$light <- na_kalman(clean$light, type = "level")
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = temp.water)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.sat.EXO)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = depth)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = light)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = discharge)) + geom_miss_point()
clean$datetimeAK <- force_tz(as.POSIXct(clean$datetimeAK), "America/Anchorage")
clean$solar.time <- calc_solar_time(as.POSIXct(clean$datetimeAK), longitude = -146.916364)
ggplot() +
geom_point(data=clean, aes(x=datetimeAK,y=DO.obs))+
geom_point(data=clean, aes(x=datetimeAK,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500)) +  theme(text = element_text(size=100))+scale_x_datetime(breaks = "3 days")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Filtering only works propperly as character
clean %>% filter(as.character(solar.time) <= "2020-09-03 04:13:57") %>% ggplot() +
geom_point(aes(x=solar.time,y=DO.obs))+
geom_point(aes(x=solar.time,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500))
#remove storm in June
clean2020.1 <- clean %>% filter(as.character(solar.time) < "2020-06-21 04:13:57")
clean2020.2 <- clean %>% filter(as.character(solar.time)>= "2020-06-28 04:13:57")
clean <- rbind(clean2020.1, clean2020.2)
#remove after shutdown
clean.moos.2020 <- clean %>% filter(as.character(solar.time) < "2020-09-03 04:13:57")
write.csv(clean.moos.2020, here("outputs", "clean.moos.2020.csv"))
MOOS.comb.in <- read.csv(here("outputs", "moos.comb.csv"))
MOOS.comb.in <- MOOS.comb.in %>% filter(datetimeAK >= "2021-03-31 15:45:00" & datetimeAK < "2021-11-22 07:30:00")
anyNA(MOOS.comb.in, recursive = TRUE)
lapply(MOOS.comb.in, summary)
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = temp.water)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.sat.EXO)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = depth)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = light)) + geom_miss_point()
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = discharge)) + geom_miss_point()
#Q data bad until 6/30
MOOS.comb.in <- MOOS.comb.in %>% filter(datetimeAK >= "2021-06-30 13:30:00")
#cut off at end
MOOS.comb.in <- MOOS.comb.in %>% filter(solar.time < "2021-09-26 04:13:57")
MOOS.comb.in %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
clean <- MOOS.comb.in %>%
mutate(datetimeAK = lubridate::ymd_hms(datetimeAK)) %>%
group_by(datetimeAK, new = rleid(is.na(DO.obs))) %>%
ungroup() %>%
group_by(DO.obs,new) %>%
filter(n()<48) %>%
select(-new)
clean$temp.water <- na_kalman(clean$temp.water)
clean$ODO.Psat <- na_kalman(clean$ODO.Psat)
clean$DO.obs <- na_kalman(clean$DO.obs)
clean$DO.sat.EXO <- na_kalman(clean$DO.sat.EXO, type = "level")
clean$DO.sat.EXO <- na_kalman(clean$DO.sat.EXO)
clean$depth <- na_kalman(clean$depth, type = "level")
clean$discharge <- na_kalman(clean$discharge, type = "level")
clean$light <- na_kalman(clean$light, type = "level")
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = temp.water)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.obs)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = DO.sat.EXO)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = depth)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = light)) + geom_miss_point()
clean %>% ggplot(aes(x = as.POSIXct(datetimeAK), y = discharge)) + geom_miss_point()
clean$datetimeAK <- force_tz(as.POSIXct(clean$datetimeAK), "America/Anchorage")
clean$solar.time <- calc_solar_time(as.POSIXct(clean$datetimeAK), longitude = -146.916364)
ggplot() +
geom_point(data=clean, aes(x=datetimeAK,y=DO.obs))+
geom_point(data=clean, aes(x=datetimeAK,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500)) +  theme(text = element_text(size=100))+scale_x_datetime(breaks = "3 days")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Filtering only works propperly as character
clean %>% filter(as.character(solar.time) <= "2021-08-15 04:13:57") %>% ggplot() +
geom_point(aes(x=solar.time,y=DO.obs))+
geom_point(aes(x=solar.time,y=discharge/500), color = "dark blue")+
scale_y_continuous(sec.axis = sec_axis(trans = ~.*500))
clean.moos.2021 <- clean %>% filter(as.character(solar.time) < "2021-08-15 04:13:57")
write.csv(clean.moos.2021, here("outputs", "clean.moos.2021.csv"))
data.moos.mm.all <- rbind(clean.moos.2019,clean.moos.2020, clean.moos.2021)
anyNA(data.moos.mm.all, recursive = TRUE)
lapply(data.moos.mm.all, summary)
CRREL <- read.csv(here("MetTowerData.csv"), skip = 5)
CRREL$datetimeAK <- as.POSIXct(CRREL$Time, tz = "America/Anchorage")
CRREL <- CRREL %>% rename(ParWm2 = CPCRW.CRREL.Main.Met.Station..PAR_Den_AVG.W.m2.)
CRREL_MOOS.2019 <- left_join(clean.moos.2019,CRREL, by = "datetimeAK")
CRREL_MOOS.2019$ParWm2 <- na_kalman(CRREL_MOOS.2019$ParWm2)
#### POKE 2019 ####
PAR.2019.url <- "https://drive.google.com/drive/u/1/folders/11kWuwCF6pTXYolwYnxcsX6OcYyQeF35z"
PAR_19.prt1 <- drive_get(as_id(PAR.2019.url))
poke_par_glist <- drive_ls(PAR_19.prt1, pattern = "191017_11619_POKE.CSV")
walk(poke_par_glist$id, ~ drive_download(as_id(.x), overwrite = TRUE))
poke.par.2019.Data <- read.csv("191017_11619_POKE.CSV",
skip = 8, header = FALSE)
poke.par.2019.Data <- poke.par.2019.Data %>%
dplyr::rename(ScanNumber = V1, Date = V2, Time = V3, RawValue = V4, CalibratedValue = V5)
#Fix Date Time
poke.par.2019.Data$DateTime <- paste(poke.par.2019.Data$Date, poke.par.2019.Data$Time, sep="")
poke.par.2019.Data$DateTime <-  dmy_hms(poke.par.2019.Data$DateTime)
poke.par.2019.Data$DateTime <- force_tz(poke.par.2019.Data$DateTime, "America/Anchorage")
#Calibrate logger 11619 to LICOR
poke.par.2019.Data$CalibratedValue <- poke.par.2019.Data$CalibratedValue * 0.035
max.par.poke.2019 <- max(poke.par.2019.Data$CalibratedValue)
max.par.crrel.2019 <- max(CRREL_MOOS.2019$ParWm2)
multiplyFactor.2019 <- max.par.poke.2019/max.par.crrel.2019
CRREL_MOOS.2019$ParMetCor <- CRREL_MOOS.2019$ParWm2 *multiplyFactor.2019
PAR.2020.url <- "https://drive.google.com/drive/u/1/folders/1udve7khOM2EX0l8BZQK3yehb2HUbwFtR"
PAR_2020.prt1 <- drive_get(as_id(PAR.2020.url))
poke_par_glist <- drive_ls(PAR_2020.prt1, pattern = "11619_002_002_POKE_EndOfSeason.CSV")
walk(poke_par_glist$id, ~ drive_download(as_id(.x), overwrite = TRUE))
poke.par.2020.Data <- read.csv("11619_002_002_POKE_EndOfSeason.CSV",
skip = 9, header = FALSE)
poke.par.2020.Data <- poke.par.2020.Data %>%
dplyr::rename(ScanNumber = V1, Date = V2, Time = V3, RawValue = V4, CalibratedValue = V5)
#Fix Date Time
poke.par.2020.Data$DateTime <- paste(poke.par.2020.Data$Date, poke.par.2020.Data$Time, sep="")
poke.par.2020.Data$DateTime <-  dmy_hms(poke.par.2020.Data$DateTime)
poke.par.2020.Data$DateTime <- force_tz(poke.par.2020.Data$DateTime, "America/Anchorage")
#Calibrate logger 11619 to LICOR
poke.par.2020.Data$CalibratedValue <- poke.par.2020.Data$CalibratedValue * 0.035
#2020
CRREL_MOOS.2020 <- left_join(clean.moos.2020,CRREL, by = "datetimeAK")
CRREL_MOOS.2020$ParWm2 <- na_kalman(CRREL_MOOS.2020$ParWm2)
max.par.poke.2020 <- max(poke.par.2020.Data$CalibratedValue)
max.par.crrel.2020 <- max(CRREL_MOOS.2020$ParWm2)
multiplyFactor.2020 <- max.par.poke.2020/max.par.crrel.2020
CRREL_MOOS.2020$ParMetCor <- CRREL_MOOS.2020$ParWm2 *multiplyFactor.2020
###### 2021 #####
PAR.2021.url <- "https://drive.google.com/drive/u/1/folders/1EPjHLDmfbCo5n12AKj7QpN2vXRCPQtg5"
PAR_2021.prt1 <- drive_get(as_id(PAR.2021.url))
par2021_glist <- drive_ls(PAR_2021.prt1, pattern = "all.dates.par.2021.csv")
walk(par2021_glist$id, ~ drive_download(as_id(.x), overwrite = TRUE))
par2021.Data <- read.csv("all.dates.par.2021.csv",
skip = 0, header = TRUE)
# Sort into sites
poke.par2021.Data <- par2021.Data %>% filter(site == "poke")
poke.par2021.Data <- poke.par2021.Data %>%
dplyr::rename(RawValue = V5)
poke.par2021.Data$DateTime <- as.POSIXct(poke.par2021.Data$DateTime)
#Calibrate loggers to LICOR
poke.par2021.Data$Calibrated.Value <- poke.par2021.Data$Calibrated.Value * 0.035
#2021
CRREL_MOOS.2021 <- left_join(clean.moos.2021,CRREL, by = "datetimeAK")
CRREL_MOOS.2021$ParWm2 <- na_kalman(CRREL_MOOS.2021$ParWm2)
max.par.poke.2021 <- max(poke.par2021.Data$Calibrated.Value)
max.par.crrel.2021 <- max(CRREL_MOOS.2021$ParWm2)
multiplyFactor.2021 <- max.par.poke.2021/max.par.crrel.2021
CRREL_MOOS.2021$ParMetCor <- CRREL_MOOS.2021$ParWm2 *multiplyFactor.2021
data.moos.mm.all <- rbind(CRREL_MOOS.2019, CRREL_MOOS.2020, CRREL_MOOS.2021)
data.moos.mm.all$light <- data.moos.mm.all$ParMetCor
data.moos.mm.all <- data.moos.mm.all %>%
select(solar.time, depth, DO.obs, DO.sat.EXO, temp.water, light, discharge)
anyNA(data.moos.mm.all, recursive = TRUE)
lapply(data.moos.mm.all, summary)
write.csv(data.moos.mm.all, here("outputs", "moose.comb.readyforMetab.new.clean.csv"))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(anytime)
library(googlesheets4)
library(ggpmisc)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(zoo)
library(xts)
library(forecast)
library(googledrive)
library(streamMetabolizer)
library(readr)
library(here)
library(rstan)
library(imputeTS)
library(itsmr)
library(purrr)
library(naniar)
library(data.table)
library(grid)
bayes_name <- mm_name(type='bayes', pool_K600='binned', err_obs_iid=TRUE, err_proc_iid=TRUE)
bayes_name_AppEtAL <- "b_Kb_oipi_tr_plrckm.stan"
bayes_specs <- specs(bayes_name,
burnin_steps=9000, saved_steps=5000, n_cores=4, n_chains = 4, GPP_daily_lower = 0, ER_daily_upper = 0
)
data.moos.mm.all <- read.csv(here("outputs", "moose.comb.readyforMetab.new.clean.csv"))
data.moos.mm.all <- data.moos.mm.all %>% filter(solar.time >= "2020-05-01 04:13:57" & solar.time < "2020-07-15 04:13:57")
data.moos.mm.all <- data.moos.mm.all %>%  rename(DO.sat = DO.sat.EXO)
data.moos.mm.all$solar.time <- as.POSIXct(data.moos.mm.all$solar.time, tz = "UTC")
data.moos.mm.all <- data.moos.mm.all %>% select(solar.time, DO.obs, DO.sat, light, discharge, depth, temp.water)
startTime <- as.POSIXct(Sys.time())
mm.test.moos <- metab(bayes_specs, data=data.moos.mm.all)
#Metab 2019
```{r}
knitr::opts_chunk$set(echo = TRUE)
bayes_name <- mm_name(type='bayes', pool_K600='binned', err_obs_iid=TRUE, err_proc_iid=TRUE)
library(ggpubr)
library(anytime)
library(googlesheets4)
library(ggpmisc)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(zoo)
library(xts)
library(forecast)
library(googledrive)
library(streamMetabolizer)
library(readr)
library(here)
library(rstan)
library(imputeTS)
library(itsmr)
library(purrr)
library(naniar)
library(data.table)
library(grid)
bayes_name <- mm_name(type='bayes', pool_K600='binned', err_obs_iid=TRUE, err_proc_iid=TRUE)
bayes_name_AppEtAL <- "b_Kb_oipi_tr_plrckm.stan"
bayes_specs <- specs(bayes_name,
burnin_steps=13000, saved_steps=2000, n_cores=4, n_chains = 4, GPP_daily_lower = 0, ER_daily_upper = 0
)
data.strt.mm.all <- read.csv(here("outputs", "strt.comb.readyforMetab.new.clean.csv"))
data.strt.mm.all <- read.csv(here("outputs", "stuart.comb.readyforMetab.new.clean"))
here()
data.strt.mm.all <- read.csv(here("outputs", "stuart.comb.readyforMetab.new.clean.csv"))
View(data.strt.mm.all)
knitr::opts_chunk$set(echo = TRUE)
chems_meta_DoD <- read.csv("C:/Users/jadams125/Documents/GitHub/DoD_chems_meta/chems_meta_DoD.csv")
View(chems_meta_DoD)
chems_meta <- read.csv("C:/Users/jadams125/Documents/GitHub/DoD_chems_meta/chems_meta.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(anytime)
library(googlesheets4)
library(ggpmisc)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(zoo)
library(xts)
library(forecast)
library(googledrive)
library(streamMetabolizer)
library(readr)
library(here)
library(rstan)
library(imputeTS)
library(itsmr)
library(purrr)
library(naniar)
library(data.table)
library(grid)
View(chems_meta)
chems_meta %>% ggplot(aes(x=DateTime, y= NitrateN_mgL))+geom_point()
chems_meta %>% filter(Location == "sensors") %>%  ggplot(aes(x=DateTime, y= NitrateN_mgL))+geom_point()
chems_meta %>% filter(Location == "sensors") %>%  ggplot(aes(x=as.POSIXct(DateTime, tz = "AKST"), y= NitrateN_mgL))+geom_point()
chems_meta %>% filter(Location == "sensors" & DateTime > "2022-01-01 00:00:00") %>%  ggplot(aes(x=as.POSIXct(DateTime, tz = "AKST"), y= NitrateN_mgL))+geom_point()
chems_meta %>% filter(Location == "sensors" & DateTime > "2022-01-01 00:00:00") %>%  ggplot(aes(x=as.POSIXct(DateTime, tz = "AKST"), y= NitrateN_mgL))+geom_point()+ facet_wrap(~site)
chems_meta %>% filter(Location == "sensors" & DateTime > "2022-01-01 00:00:00") %>%  ggplot(aes(x=as.POSIXct(DateTime, tz = "AKST"), y= NitrateN_mgL))+geom_point()+ facet_wrap(~Site)
View(chems_meta)
chems_meta_test <- within(chems_meta, location[location == 'NA' & Site == 'EPSCoR'] <- 'sensors')
chems_meta_test <- within(chems_meta, location[location == NA & Site == 'EPSCoR'] <- 'sensors')
chems_meta_test <- within(chems_meta, location[location = NA & Site == 'EPSCoR'] <- 'sensors')
chems_meta %>% mutate(location = ifelse(Site == "EPSCoR" & Location == NA, "sensors", location))\
chems_meta %>% mutate(location = ifelse(Site == "EPSCoR" & Location == NA, "sensors", location))
chems_meta %>% mutate(location = ifelse(Site == "EPSCoR" & Location = NA, "sensors", location))
chems_meta %>% mutate(location = ifelse(Site == "EPSCoR" & Location == "", "sensors", location))
chems_meta %>% mutate(location = ifelse(Site == "EPSCoR" & Location == "NA", "sensors", location))
chems_meta %>% mutate(location = ifelse(Site == "EPSCoR" & Location == NA, "sensors", location))
chems_meta$Location[which(chems_meta$Site == "EPSCoR")] <- "sensors"
chems_meta %>% filter(Location == "sensors" & DateTime > "2022-01-01 00:00:00") %>%  ggplot(aes(x=as.POSIXct(DateTime, tz = "AKST"), y= NitrateN_mgL))+geom_point()+ facet_wrap(~Site)
View(chems_meta)
chems_meta$Site[chems_meta$Site=="EPSCOR"] <- "EPSCoR"
chems_meta$Location[which(chems_meta$Site == "EPSCoR")] <- "sensors"
chems_meta %>% filter(Location == "sensors" & DateTime > "2022-01-01 00:00:00") %>%  ggplot(aes(x=as.POSIXct(DateTime, tz = "AKST"), y= NitrateN_mgL))+geom_point()+ facet_wrap(~Site)
chems_meta %>% filter(Location == "sensors") %>%  ggplot(aes(x=as.POSIXct(DateTime, tz = "AKST"), y= NitrateN_mgL))+geom_point()+ facet_wrap(~Site)
library(googlesheets4)
?googlesheets4
pubr)
library(ggpubr)
library(anytime)
library(googlesheets4)
library(ggpmisc)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(zoo)
library(xts)
library(forecast)
library(googledrive)
library(streamMetabolizer)
library(readr)
library(here)
library(imputeTS)
library(itsmr)
library(purrr)
salcha.2021.1.full <- read.csv(here("outputs", "salcha.2021.1.new.full.csv"))
salcha.2021.1.data <- read.csv(here("outputs", "salcha.2021.1.new.model_data.csv"))
salcha.2021.2.full <- read.csv(here("outputs", "salcha.2021.2.new.full.csv"))
salcha.2021.2.data <- read.csv(here("outputs", "salcha.2021.2.new.model_data.csv"))
salcha.all.2021 <- rbind(salcha.2021.1.full, salcha.2021.2.full)
salcha.all.2021.data <- rbind(salcha.2021.1.data,salcha.2021.2.data)
salcha.all.2021.data$solar.time <- as.POSIXct(salcha.all.2021.data$solar.time, tz = "UTC")
#Plots
gpp <- ggplot(data=salcha.all.2021, aes(x=date, y=GPP_mean)) + geom_point(color = "chartreuse4") + geom_errorbar(aes(ymin=GPP_mean-GPP_sd, ymax=GPP_mean+GPP_sd), width=.2, position=position_dodge(0.05), color = "chartreuse4") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank() )
er <- ggplot(data = salcha.all.2021, aes(x = date)) +geom_point(aes(y = ER_mean), color = "firebrick3") + geom_errorbar(aes(ymin=ER_mean-ER_sd, ymax=ER_mean+ER_sd), width=.2, position=position_dodge(0.05), color = "firebrick3")
k600 <- ggplot(data=salcha.all.2021, aes(x=date, y=K600_daily_mean)) + geom_point(color = "orange") + geom_errorbar(aes(ymin=K600_daily_mean-K600_daily_sd, ymax=K600_daily_mean+K600_daily_sd), width=.2, position=position_dodge(0.05), color = "orange") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank() )
rhat <- ggplot(data=salcha.all.2021, aes(x=date)) + geom_point(aes(y=GPP_Rhat, colour = "GPP")) + geom_point(aes(y=as.numeric(ER_Rhat), colour = "ER")) + geom_point(aes(y=K600_daily_Rhat, colour = "K600")) +
labs(y = "RHAT") + theme(legend.position="top") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank() )
ggplot(data=salcha.all.2021, aes(x=GPP_mean, y=ER_mean)) + geom_point()+ stat_poly_line() + stat_poly_eq()
ggplot(data=salcha.all.2021, aes(x=GPP_mean, y=K600_daily_mean)) + geom_point()+ stat_poly_line() + stat_poly_eq()
ggplot(data=salcha.all.2021, aes(x=ER_mean, y=K600_daily_mean)) + geom_point()+ stat_poly_line() + stat_poly_eq()
dev.set(dev.next())
library(grid)
grid.newpage()
#DO r2
salcha.DO.pred <- predict_DO(mm.test.salcha.new)
salcha.all.2021.data <- na.omit(salcha.all.2021.data)
lm(DO.obs~ DO.mod, data = salcha.all.2021.data)
salcha.all.2021.data$SM.date <- as.Date(as.POSIXct(salcha.all.2021.data$solar.time) - 4*60*60)
salcha.all.2021.data$SM.date <- as.factor(salcha.all.2021.data$SM.date)
fit_model <- function(x, y) summary(lm(x ~ y))$adj.r.squared
test.run <- salcha.all.2021.data %>% group_by(SM.date) %>% summarise(adj.R2 = fit_model(DO.obs,DO.mod))
salcha.all.2021.data <- full_join(salcha.all.2021.data, test.run)
rsq <-  summary(lm(salcha.all.2021.data$DO.mod~salcha.all.2021.data$DO.obs))$r.squared
library(ggplot2)
p1 <- ggplot(salcha.all.2021.data, aes(x = solar.time)) + geom_point(aes(y=DO.obs, colour = "Observed DO"), color = "darkcyan") + geom_line(aes(y = DO.mod, colour= "Modeled DO"), color = "blue4") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank() ) + labs(colour="Green", y = "DO (mg/L)") +  theme(legend.position="none") + ggtitle("Observed (points) and Modeled (lines)")
p2 <- ggplot(salcha.all.2021.data, aes(x = solar.time)) + geom_point(aes(y=adj.R2))
q.fig <- ggplot(data = salcha.all.2021.data, aes(x = solar.time)) +geom_point(aes(y=discharge))
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), ggplotGrob(rhat),ggplotGrob(q.fig), ggplotGrob(k600),ggplotGrob(gpp), ggplotGrob(er)))
salcha.all.2021$date <- as.POSIXct.Date(salcha.all.2021$date)
salcha.all.2021$date <- as.POSIXct.Date(as.character(salcha.all.2021$date))
View(salcha.all.2021)
salcha.all.2021$date <- as.POSIXct(as.character(salcha.all.2021$date))
salcha.all.2021.data$solar.time <- as.POSIXct(salcha.all.2021.data$solar.time, tz = "UTC")
#Plots
gpp <- ggplot(data=salcha.all.2021, aes(x=date, y=GPP_mean)) + geom_point(color = "chartreuse4") + geom_errorbar(aes(ymin=GPP_mean-GPP_sd, ymax=GPP_mean+GPP_sd), width=.2, position=position_dodge(0.05), color = "chartreuse4") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank() )
er <- ggplot(data = salcha.all.2021, aes(x = date)) +geom_point(aes(y = ER_mean), color = "firebrick3") + geom_errorbar(aes(ymin=ER_mean-ER_sd, ymax=ER_mean+ER_sd), width=.2, position=position_dodge(0.05), color = "firebrick3")
k600 <- ggplot(data=salcha.all.2021, aes(x=date, y=K600_daily_mean)) + geom_point(color = "orange") + geom_errorbar(aes(ymin=K600_daily_mean-K600_daily_sd, ymax=K600_daily_mean+K600_daily_sd), width=.2, position=position_dodge(0.05), color = "orange") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank() )
rhat <- ggplot(data=salcha.all.2021, aes(x=date)) + geom_point(aes(y=GPP_Rhat, colour = "GPP")) + geom_point(aes(y=as.numeric(ER_Rhat), colour = "ER")) + geom_point(aes(y=K600_daily_Rhat, colour = "K600")) +
labs(y = "RHAT") + theme(legend.position="top") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank() )
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), ggplotGrob(rhat),ggplotGrob(q.fig), ggplotGrob(k600),ggplotGrob(gpp), ggplotGrob(er)))
View(salcha.all.2021.data)
